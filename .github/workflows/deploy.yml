name: Build and Push to ECR
#test1
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  AWS_REGION: eu-north-1                   # AWS region
  ECR_REPOSITORY: flask-app               # Correct ECR repository name

jobs:
  build:
    name: Build and Push Image
    runs-on: ubuntu-latest

    steps:
    - name: Checkout source code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Delete previous images from ECR (except current tag)
      env:
        AWS_REGION: ${{ env.AWS_REGION }}
        ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.ref_name }}
      run: |
        echo "Deleting old images from ECR repository: $ECR_REPOSITORY except tag: $IMAGE_TAG"

        # Fetch image IDs excluding current IMAGE_TAG
        IMAGES_TO_DELETE=$(aws ecr list-images \
          --region $AWS_REGION \
          --repository-name $ECR_REPOSITORY \
          --query "imageIds[?imageTag!=\`$IMAGE_TAG\`]" \
          --output json)

        if [ "$IMAGES_TO_DELETE" != "[]" ]; then
          echo "Deleting images: $IMAGES_TO_DELETE"
          aws ecr batch-delete-image \
            --region $AWS_REGION \
            --repository-name $ECR_REPOSITORY \
            --image-ids "$IMAGES_TO_DELETE"
        else
          echo "No images to delete."
        fi

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.ref_name }}
      run: |
        echo "Building and pushing Docker image to: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

        # Tag as latest and push
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
